@page "/"
@page "/{page:int}"

@using DevNews.Core.UseCases
@using DevNews.Core.Dto
@using Microsoft.Extensions.Logging
@inject GetArticles _getArticles;
@inject GetArticlesPagesQuantity _getArticlesPagesQuantity;
@inject ILogger<Index> _logger;
<h1>DevNews Feed</h1>

@if (articles == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <ul class="list-unstyled">
        @foreach (var (title, content, link) in articles)
        {
            <li class="media">
                <div class="media-body">
                    <h5 class="mt-0 mb-1">
                        <a href="@link">@title</a>
                    </h5>
                    <p>@content</p>
                </div>
            </li>
        }
    </ul>

    <nav aria-label="...">
        <ul class="pagination">


            @if (Page == 1)
            {
                <li class="page-item disabled">
                    <a class="page-link" href="@(Page - 1)" tabindex="-1" aria-disabled="true">Previous</a>
                </li>
                <li class="page-item active" aria-current="page">
                    <a class="page-link" href="/@Page">@Page</a>
                </li>
                if (Page + 1 <= numberOfPages)
                {
                    <li class="page-item">
                        <a class="page-link" href="/@(Page + 1)">@(Page + 1)</a>
                    </li>
                }
                
                if (Page + 2 <= numberOfPages)
                {
                    <li class="page-item">
                        <a class="page-link" href="/@(Page + 2)">@(Page + 2)</a>
                    </li>
                }

                if (Page + 1 <= numberOfPages)
                {
                    <li class="page-item">
                        <a class="page-link" href="@(Page + 1)">Next</a>
                    </li>
                }
                else
                {
                    <li class="page-item disabled">
                        <a class="page-link" href="@(Page + 1)">Next</a>
                    </li>
                }
            }
            else if (Page < numberOfPages)
            {
                <li class="page-item">
                    <a class="page-link" href="@(Page - 1)" tabindex="-1" aria-disabled="true">Previous</a>
                </li>
                <li class="page-item">
                    <a class="page-link" href="/@(Page - 1)">@(Page - 1)</a>
                </li>
                <li class="page-item active" aria-current="page">
                    <a class="page-link" href="/@Page">@Page</a>
                </li>
                <li class="page-item">
                    <a class="page-link" href="/@(Page + 1)">@(Page + 1)</a>
                </li>
                <li class="page-item">
                    <a class="page-link" href="@(Page + 1)">Next</a>
                </li>
            }
            else
            {
                <li class="page-item">
                    <a class="page-link" href="@(Page - 1)" tabindex="-1" aria-disabled="true">Previous</a>
                </li>
                if (Page - 2 > 0)
                {
                    <li class="page-item">
                        <a class="page-link" href="/@(Page - 2)">@(Page - 2)</a>
                    </li>
                }

                <li class="page-item">
                    <a class="page-link" href="/@(Page - 1)">@(Page - 1)</a>
                </li>
                <li class="page-item active" aria-current="page">
                    <a class="page-link" href="/@Page">@Page</a>
                </li>
                <li class="page-item disabled">
                    <a class="page-link" href="@(Page + 1)">Next</a>
                </li>
            }

        </ul>
    </nav>
}

@code {
    private List<ArticleDto> articles;

    [Parameter]
    public int? Page { get; set; } = 1;

    private long numberOfPages = 0;
    
        private const int pageSize = 10;

    protected override async Task OnParametersSetAsync()
    {
        if (Page is null or <= 0)
        {
            Page = 1;
        }
        else
        {
            await LoadArticles();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var page = Page ?? 1;

        var getNumberOfPagesTask = LoadNumberOfPages();
        var getArticlesTask = LoadArticles();

        await Task.WhenAll(getNumberOfPagesTask, getArticlesTask);
    }

    private async Task LoadArticles()
    {
        var page = Page ?? 1;
        _logger.LogInformation("Load Articles by Param Page={Page} and PageSize={PageSize}", page, pageSize);
        articles = await _getArticles.Execute(new GetArticlesQuery(page, pageSize));
    }

    public async Task LoadNumberOfPages()
    {
        numberOfPages = await _getArticlesPagesQuantity.Execute(pageSize);
    }

}